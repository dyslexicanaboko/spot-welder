{{Namespaces}}
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;

namespace {{Namespace}}
{
	[Route("api/v1/{{ApiRoute}}")]
	[ApiController]
	public class {{ClassName}}Controller
		: AppBaseController
	{
		private readonly I{{SubjectName}}Mapper _mapper;

		private readonly I{{SubjectName}}Service _service;

		public {{SubjectName}}Controller(
			I{{SubjectName}}Service service,
			I{{SubjectName}}Mapper mapper)
		{
			_service = service;

			_mapper = mapper;
		}

		// GET api/{{ApiRoute}}/5
		[HttpGet("{id:{{PrimaryKeyType}}}")]
		[ProducesResponseType(StatusCodes.Status200OK, Type = typeof({{InterfaceName}}))]
		[ProducesResponseType(StatusCodes.Status404NotFound, Type = typeof(ErrorModel))]
		public async Task<ActionResult<{{InterfaceName}}>> Get({{PrimaryKeyType}} id)
		{
			var entity = [AMO]_service.Get{{SubjectName}}(id)[AMC];

			if (entity == null) throw Lib.Exceptions.NotFound.{{SubjectName}}(id);

			return Ok(_mapper.ToModel(entity));
		}
		
		// POST api/{{ApiRoute}}
		[HttpPost]
		[ProducesResponseType(StatusCodes.Status201Created, Type = typeof({{InterfaceName}}))]
		[ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ErrorModel))]
		[ProducesResponseType(StatusCodes.Status404NotFound, Type = typeof(ErrorModel))]
		[ProducesResponseType(StatusCodes.Status500InternalServerError, Type = typeof(ErrorModel))]
		public async Task<ActionResult<{{ModelName}}>> Post([FromBody] {{SubjectName}}V1CreateModel model)
		{
			var entity = _mapper.ToEntity(model);

			Validations.IsNotNull(entity, nameof(model));

			var result = [AMO]_service.Add(entity)[AMC];

			var m = _mapper.ToModel(result);

			return CreatedAtAction(nameof(Get), new { id = m!.{{PrimaryKeyProperty}} }, m);
		}
		
		// PATCH api/{{ApiRoute}}/5
		[HttpPatch("{id:{{PrimaryKeyType}}}")]
		[ProducesResponseType(StatusCodes.Status204NoContent)]
		[ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ErrorModel))]
		[ProducesResponseType(StatusCodes.Status404NotFound, Type = typeof(ErrorModel))]
		[ProducesResponseType(StatusCodes.Status500InternalServerError, Type = typeof(ErrorModel))]
		public async Task<ActionResult> Patch({{PrimaryKeyType}} id, [FromBody] JsonPatchDocument<{{SubjectName}}V1PatchModel> patchDoc)
		{
			var db = [AMO]_service.Get{{SubjectName}}(id)[AMC];
						
			var model = _mapper.ToPatchModel(db);

			if (model == null) throw Lib.Exceptions.NotFound.{{SubjectName}}(id);

			patchDoc.ApplyTo(model);

			var entity = _mapper.ToEntity(model);

			[AMO]_service.Edit(entity)[AMC];

			return NoContent();
		}

		// DELETE api/{{ApiRoute}}/5
		[HttpDelete("{id:{{PrimaryKeyType}}}")]
		[ProducesResponseType(StatusCodes.Status204NoContent)]
		public async Task<ActionResult> Delete({{PrimaryKeyType}} id)
		{
			[AMO]_service.Remove(id)[AMC];

			return NoContent();
		}
	}
}
