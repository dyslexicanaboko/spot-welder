{{SqlNamespaces}}
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
{{Namespaces}}

namespace {{Namespace}}
{
	public class {{ClassName}}Repository
	{
		public [AO]{{EntityName}}?[AC] Select({{PrimaryKeyType}} {{PrimaryKeyParameter}})
		{
			const string sql = @"
			SELECT
{{SelectAllList}}
			FROM {{Schema}}.{{Table}}
			WHERE {{PrimaryKeyColumn}} = @{{PrimaryKeyProperty}}";

			var p = GetPrimaryKeyParameter({{PrimaryKeyParameter}});

			using var dr = [A]ExecuteReaderText(sql, p);
			
			var lst = ToList(dr, ToEntity);

			return !lst.Any() ? null : lst.Single();
		}

		public [AO]IEnumerable<{{EntityName}}>[AC] SelectAll()
		{
			const string sql = @"
			SELECT
{{SelectAllList}}
			FROM {{Schema}}.{{Table}}";

			using var dr = [A]ExecuteReaderText(sql);
			
			return ToList(dr, ToEntity);
		}

		public [AO]{{PrimaryKeyType}}[AC] Insert({{EntityName}} entity)
		{
			const string sql = @"INSERT INTO {{Schema}}.{{Table}} (
{{InsertColumnList}}
						) VALUES (
{{InsertValuesList}}) {{ScopeIdentity}}";

			var lst = GetParameters(entity);

{{PrimaryKeyInsertExecution}}
		}

		public [void] Update({{EntityName}} entity)
		{
			const string sql = @"UPDATE {{Schema}}.{{Table}} SET 
{{UpdateParameters}}
					WHERE {{PrimaryKeyColumn}} = @{{PrimaryKeyProperty}}";

			var lst = GetParameters(entity);

			var p = GetPrimaryKeyParameter(entity.{{PrimaryKeyProperty}});

			lst.Add(p);

			[A]ExecuteNonQuery(sql, lst.ToArray());
		}

		public [void] Delete({{PrimaryKeyType}} {{PrimaryKeyParameter}})
		{
			const string sql = @"DELETE FROM {{Schema}}.{{Table}} WHERE {{PrimaryKeyColumn}} = @{{PrimaryKeyProperty}}";

			var arr = new {{ParameterObject}}[] { GetPrimaryKeyParameter({{PrimaryKeyParameter}}) };
			
			[A]ExecuteNonQuery(sql, arr);
		}
		
		private {{ParameterObject}} GetPrimaryKeyParameter({{PrimaryKeyType}} {{PrimaryKeyParameter}})
		{
			var p = new {{ParameterObject}}();
			p.ParameterName = "@{{PrimaryKeyProperty}}";
			p.{{ParameterDbTypeProperty}} = {{ParameterDbTypeEnum}}.{{PrimaryKeySqlDbType}};
			p.Value = {{PrimaryKeyParameter}};
			
			return p;
		}

		private List<{{ParameterObject}}> GetParameters({{EntityName}} entity)
		{
			{{ParameterObject}} p = null;

			var lst = new List<{{ParameterObject}}>();
			
{{SqlParameters}}
			
			return lst;
		}
		
		private {{EntityName}} ToEntity(IDataReader reader)
		{
			var r = reader;

			var e = new {{EntityName}}();
{{SetProperties}}

			return e;
		}
	}
}
